//01-1
(+)

//01-2
(+ (* 5 2) -)

//02-1
(print-num 1)
(print-num 2)
(print-num 3)
(print-num 4)

//02-2
(print-num 0)
(print-num -123)
(print-num 456)

//03-1
(+ 1 2 3)
(* 4 5 6)

(print-num (+ 1 (+ 2 3 4) (* 4 5 6) (/ 8 3) (mod 10 3)))

(print-num (mod 10 4))

(print-num (- (+ 1 2) 4))

(print-num -256)

//03-2
(print-num (mod 10 (+ 1 2)))

(print-num (* (/ 1 2) 4))

(print-num (- (+ 1 2 3 (- 4 5) 6 (/ 7 8) (mod 9 10))
              11))

//10 1 24 2 1 3
(print-num (+ 1 2 3 4))
(print-num (- 2 1))
(print-num (* 1 2 3 4))
(print-num (/ 10 5))
(print-num (/ 3 2))
(print-num (mod 8 5))

//04-1
(print-bool #t)
(print-bool #f)

(print-bool (and #t #f))
(print-bool (and #t #t))

(print-bool (or #t #f))
(print-bool (or #f #f))

(print-bool (not #t))
(print-bool (not #f))

//04-2
(print-bool (or #t #t #f))
(print-bool (or #f (and #f #t) (not #f)))
(print-bool (and #t (not #f) (or #f #t) (and #t (not #t))))

//->#f #t #f #t #t #f #t
(print-bool (> 1 2))
(print-bool (< 1 2))
(print-bool (= 1 2))
(print-bool (= (+ 1 1) 2 (/6 3)))
(print-bool (and #t (> 2 1)))
(print-bool (or (> 1 2) #f))
(print-bool  (not (> 1 2)))

//05-1
(print-num (if #t 1 2))

(print-num (if #f 1 2))

//05-2
(print-num (if (< 1 2) (+ 1 2 3) (* 1 2 3 4 5)))

(print-num (if (= 9 (* 2 5))
               0
               (if #t 1 2)))

//->2
(print-num (if (= 1 0) 1 2))

//06-1
(define x 1)

(print-num x)

(define y (+ 1 2 3))

(print-num y)

//06-2
(define a (* 1 2 3 4))

(define b (+ 10 -5 -2 -1))

(print-num (+ a b))

//->6
(define x 5)  
(print-num (+ x 1))

//07-1
(print-num
  ((lambda (x) (+ x 1)) 3))

(print-num
  ((lambda (a b) (+ a b)) 4 5))

//07-2
(define x 0)

(print-num
  ((lambda (x y z) (+ x (* y z))) 10 20 30))


(print-num x)

//08-1
(define foo
  (lambda (a b c) (+ a b (* b c))))

(print-num (foo 10 9 8))

//08-2
(define bar (lambda (x) (+ x 1)))

(define bar-z (lambda () 2))

(print-num (bar (bar-z)))

